// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: localization/localization.proto

package localProto

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Localization service

func NewLocalizationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Localization service

type LocalizationService interface {
	// 新增本地化翻译，其中有部分不能指定，请参照LocalizationDto字段说明
	// response.Data = nil
	Add(ctx context.Context, in *LocalizationDto, opts ...client.CallOption) (*common.Response, error)
	// 删除指定id的本地化翻译
	// response.Data = nil
	Delete(ctx context.Context, in *common.IdDto, opts ...client.CallOption) (*common.Response, error)
	// 更新指定本地化翻译，其中有部分不能更新字段，请参照LocalizationDto字段说明
	// response.Data = nil
	Update(ctx context.Context, in *LocalizationDto, opts ...client.CallOption) (*common.Response, error)
	// 获取指定id的本地化翻译
	// response.Data = LocalizationDto
	Get(ctx context.Context, in *common.IdDto, opts ...client.CallOption) (*common.Response, error)
	// 获取指定规则的本地化内容
	// response.Data = common.PagedList {
	//      list = List<LocalizationDto>
	//    }
	List(ctx context.Context, in *LocalizationWhereDto, opts ...client.CallOption) (*common.Response, error)
	// 发布最新的版本，如：json文件
	// response.Data = nil
	Publish(ctx context.Context, in *LocalizationPublishDto, opts ...client.CallOption) (*common.Response, error)
	// 获取指定类型的Map结果
	// response.Data = List<LocalizationGetPublishedDto>
	GetPublishedMap(ctx context.Context, in *LocalizationGetPublishedWhere, opts ...client.CallOption) (*common.Response, error)
}

type localizationService struct {
	c    client.Client
	name string
}

func NewLocalizationService(name string, c client.Client) LocalizationService {
	return &localizationService{
		c:    c,
		name: name,
	}
}

func (c *localizationService) Add(ctx context.Context, in *LocalizationDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Localization.Add", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationService) Delete(ctx context.Context, in *common.IdDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Localization.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationService) Update(ctx context.Context, in *LocalizationDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Localization.Update", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationService) Get(ctx context.Context, in *common.IdDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Localization.Get", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationService) List(ctx context.Context, in *LocalizationWhereDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Localization.List", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationService) Publish(ctx context.Context, in *LocalizationPublishDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Localization.Publish", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationService) GetPublishedMap(ctx context.Context, in *LocalizationGetPublishedWhere, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Localization.GetPublishedMap", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Localization service

type LocalizationHandler interface {
	// 新增本地化翻译，其中有部分不能指定，请参照LocalizationDto字段说明
	// response.Data = nil
	Add(context.Context, *LocalizationDto, *common.Response) error
	// 删除指定id的本地化翻译
	// response.Data = nil
	Delete(context.Context, *common.IdDto, *common.Response) error
	// 更新指定本地化翻译，其中有部分不能更新字段，请参照LocalizationDto字段说明
	// response.Data = nil
	Update(context.Context, *LocalizationDto, *common.Response) error
	// 获取指定id的本地化翻译
	// response.Data = LocalizationDto
	Get(context.Context, *common.IdDto, *common.Response) error
	// 获取指定规则的本地化内容
	// response.Data = common.PagedList {
	//      list = List<LocalizationDto>
	//    }
	List(context.Context, *LocalizationWhereDto, *common.Response) error
	// 发布最新的版本，如：json文件
	// response.Data = nil
	Publish(context.Context, *LocalizationPublishDto, *common.Response) error
	// 获取指定类型的Map结果
	// response.Data = List<LocalizationGetPublishedDto>
	GetPublishedMap(context.Context, *LocalizationGetPublishedWhere, *common.Response) error
}

func RegisterLocalizationHandler(s server.Server, hdlr LocalizationHandler, opts ...server.HandlerOption) error {
	type localization interface {
		Add(ctx context.Context, in *LocalizationDto, out *common.Response) error
		Delete(ctx context.Context, in *common.IdDto, out *common.Response) error
		Update(ctx context.Context, in *LocalizationDto, out *common.Response) error
		Get(ctx context.Context, in *common.IdDto, out *common.Response) error
		List(ctx context.Context, in *LocalizationWhereDto, out *common.Response) error
		Publish(ctx context.Context, in *LocalizationPublishDto, out *common.Response) error
		GetPublishedMap(ctx context.Context, in *LocalizationGetPublishedWhere, out *common.Response) error
	}
	type Localization struct {
		localization
	}
	h := &localizationHandler{hdlr}
	return s.Handle(s.NewHandler(&Localization{h}, opts...))
}

type localizationHandler struct {
	LocalizationHandler
}

func (h *localizationHandler) Add(ctx context.Context, in *LocalizationDto, out *common.Response) error {
	return h.LocalizationHandler.Add(ctx, in, out)
}

func (h *localizationHandler) Delete(ctx context.Context, in *common.IdDto, out *common.Response) error {
	return h.LocalizationHandler.Delete(ctx, in, out)
}

func (h *localizationHandler) Update(ctx context.Context, in *LocalizationDto, out *common.Response) error {
	return h.LocalizationHandler.Update(ctx, in, out)
}

func (h *localizationHandler) Get(ctx context.Context, in *common.IdDto, out *common.Response) error {
	return h.LocalizationHandler.Get(ctx, in, out)
}

func (h *localizationHandler) List(ctx context.Context, in *LocalizationWhereDto, out *common.Response) error {
	return h.LocalizationHandler.List(ctx, in, out)
}

func (h *localizationHandler) Publish(ctx context.Context, in *LocalizationPublishDto, out *common.Response) error {
	return h.LocalizationHandler.Publish(ctx, in, out)
}

func (h *localizationHandler) GetPublishedMap(ctx context.Context, in *LocalizationGetPublishedWhere, out *common.Response) error {
	return h.LocalizationHandler.GetPublishedMap(ctx, in, out)
}
